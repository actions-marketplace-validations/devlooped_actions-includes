name: Resolve File Includes
author: Daniel Cazzulino
description: "Resolves include directives written as HTML comments, like <!-- include: path/to/file.md --> (i.e. in your readme)"

inputs:
  include:  # file extension filter expression
    description: 'File extensions to include for processing, like *.md'
    required: false
    default: '*.md'
  validate:  # whether to validate (and error) include links
    required: false
    default: true

branding:
  icon: "code"
  color: "purple"

runs:
  using: "composite"
  steps:
    - name: includes
      shell: pwsh
      run: |
        $validate = $${{ inputs.validate }}
        foreach ($file in (Get-ChildItem -Recurse -Path ${{ inputs.include }})) {
            Write-Output "Processing $file"
            $content = Get-Content $file -Raw
            $replacements = @{}
            foreach ($match in (Select-String -Pattern '<!--\s?include (.*?)\s?-->' -Path $file)) {
                $includedPath = ($match.Matches[0].Value -replace '<!--\s?include ','' -replace '\s?-->', '').Trim()
                $fragment = $null
                if ($includedPath.Contains('#')) {
                    $fragment = '#' + $includedPath.Split('#')[1]
                    $includedPath = $includedPath.Substring(0, $includedPath.IndexOf('#'))
                }
                $includedFullPath = Join-Path (Get-ChildItem -Path $file).DirectoryName -ChildPath $includedPath
                if (Test-Path $includedFullPath) {
                    $include = (Get-Content $includedFullPath -Raw) ?? ''
                    # Resolve fragment specifier if present
                    if ($fragment) {
                        $anchor = "<!-- $fragment -->"
                        $start = $include.IndexOf($anchor)
                        if ($start -eq -1) {
                            if ($validate) {
                                Write-Error "Referenced anchor $fragment not found in $includedPath"
                            } else {
                                Write-Warning "Referenced anchor $fragment not found in $includedPath"
                            }
                            continue
                        }
                        $include = $include.Substring($start)
                        $end = $include.IndexOf($anchor, $anchor.Length)
                        if ($end -ne -1) {
                            $include = $include.Substring(0, $end + $anchor.Length)
                        }
                    }
                    # TODO: disable nested includes until we can properly support that scenario 
                    $include = $include -replace '<!--\s?include ','<!-- '
                    # see if we already have a section we previously replaced
                    $existingRegex = "<!--\s?include $includedPath$fragment\s?-->[\s\S]*<!-- $includedPath$fragment -->"
                    $replacement = "<!-- include $includedPath$fragment -->`n$include`n<!-- $includedPath$fragment -->"
                    if ($content -match $existingRegex) {
                        $replacements[$existingRegex] = $replacement
                    } else {
                        $replacements["<!--\s?include $includedPath$fragment\s?-->"] = $replacement
                    }
                } else {
                    if ($validate) {
                        Write-Error "Included file $includedPath in $($file.Name) not found" 
                    } else {
                        Write-Warning "Included file $includedPath in $($file.Name) not found" 
                    }
                }
            }

            if ($replacements.Count -gt 0) {
                foreach ($replacement in $replacements.GetEnumerator()) {
                    #Write-Host "Replacing $($replacement.Key) with $($replacement.Value)"
                    $content = $content -replace $replacement.Key, $replacement.Value
                }

                $content = $content.TrimEnd()
                $actual = (Get-Content $file -Raw).TrimEnd()
                
                if ($content -ne $actual) {
                    Set-Content $file -Value $content.TrimEnd()
                    Write-Output "Updated $($file.Name)"
                }
            }
        }